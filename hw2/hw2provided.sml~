(* Dan Grossman, Coursera PL, HW2 Provided Code *)

(* if you use this function to compare two strings (returns true if the same
   string), then you avoid several of the functions in problem 1 having
   polymorphic types that may be confusing *)
fun same_string(s1 : string, s2 : string) =
    s1 = s2

(* Problem 1
fun all_except_option (s, s_list: string list) = 
    if null s_list
    then NONE
    else if same_string (hd s_list, s)
         then SOME (tl s_list)
         else let val tl_ans = all_except_option (s, tl s_list)
	      in if isSome tl_ans
		 then SOME (hd s_list :: valOf tl_ans)
		 else NONE
	      end
*)

fun all_except_option (_, []) = NONE
  | all_except_option (str, x :: xs) = 
        if same_string (str, x)
	then SOME (xs)
	else case all_except_option (str, xs) of
		  NONE => NONE
		| SOME y  => SOME (x :: y)

fun get_substitutions1 ((y :: ys) :: xs, str) = 
    
(* you may assume that Num is always used with values 2, 3, ..., 10
   though it will not really come up *)
datatype suit = Clubs | Diamonds | Hearts | Spades
datatype rank = Jack | Queen | King | Ace | Num of int 
type card = suit * rank

datatype color = Red | Black
datatype move = Discard of card | Draw 

exception IllegalMove

(* put your solutions for problem 2 here *)
